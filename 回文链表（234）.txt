https://leetcode-cn.com/problems/palindrome-linked-list/

回文链表（234）

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        if head is None:
            return True
        if head.next is None:
            return True
        end_of_first=self.find_end(head)
        start_of_second=self.reverse(end_of_first.next)
        while start_of_second is not None:
            if head.val!=start_of_second.val:
                return False
            head=head.next
            start_of_second=start_of_second.next
        return True
    def find_end(self,head):
            fast=head
            slow=head
            while fast.next is not None and fast.next.next is not None:
                fast=fast.next.next
                slow=slow.next
            return slow
    def reverse(self,head):
            pre=None
            cur=head
            while cur is not None:
                temp=cur.next
                cur.next=pre
                pre=cur
                cur=temp
            return pre